{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 1. npx create-react-app news-sensei\par
2. rccp - shortcut to create class based component with propTypes\par
3.rfce - shortcut to create function based component \par
4. Bring Navbar from bootstrap and paste in return div\par
5. render() in class based component is lifecycle method. It will convert jsx into html and render \par
6. Destructuring property in javascript\par
\tab let \{title,description\}=this.props - this is how we use props in class based components\par
\tab we can access these props in our jsx using title or description. this.props will be \tab destructured.\par
7. my-2 in bootstrap gives y-margin\par
8.mx-2 gives x margin. We can use mt-2,ml-2,mr-2,mb-2\par
9. Similarly pl-2,pt-2,pr-2,pb-2 for padding\par
10. col-md-3 makes 3 colums in medium devices\par
11. btn-sm give you small button\par
12. constructor()\{\par
    super();\par
    this.state = \{\par
        articles: this.articles,\par
         loading: false\par
    \}\par
  \}\par
when ever we create a constructor in class in class based component, we need to call super() method which inturn imports contructor of parent class. this.state is used to setState in react class component.\par
13. we cannot declare methods/variables using let/const.\par
14. we need to declare any variable as state variable, only if we want to change it with out any reload.\par
15. In the news app we are building, there is no need to set title and description as state variables.\par
16. We can use props to change the state, but we cannot change props. props are readonly.\par
17. \{this.state.articles.map((element)=>\{\par
            return <div className="col-md-4" key=\{element.url\}>\par
                <NewsItem title = \{element.title\} description=\{element.description\} imageUrl=\{element.urlToImage!==null?element.urlToImage:`news-reader.jpg`\}></NewsItem>\par
            </div>\par
        \})\}\par
we can iterate over the state using map() function.\par
18. We need to assign unique key along with the jsx that we are returning.\par
19. componentDidMount()- this is a lifecycle method. It runs after render() method\par
20. First constructor() runs, then render() method and then componentDidMount()\par
21. async componentDidMount()\{\par
    let apiEndpoint = "{{\field{\*\fldinst{HYPERLINK https://newsapi.org/v2/everything?q=bitcoin&apiKey=748eb03f4830456ea48b83b86cbac8f5 }}{\fldrslt{https://newsapi.org/v2/everything?q=bitcoin&apiKey=748eb03f4830456ea48b83b86cbac8f5\ul0\cf0}}}}\f0\fs22 ";\par
    let data = await fetch(apiEndpoint);\par
    let parsedData = await data.json();\par
    this.setState(\{\par
        articles: parsedData.articles\par
    \})\par
\}\par
async function waits till await is completed and then only nxt lines will be processed.\par
22. We can set the state of loading as true before making api call. Once data is fetched we can change back the state of loading as false.\par
this.setState(\{\par
            loading: true\par
        \})\par
        let data = await fetch(apiEndpoint);\par
        let parsedData = await data.json();\par
        this.setState(\{\par
            articles: parsedData.articles,\par
            page: this.state.page+1,\par
            loading: false\par
        \})\par
23. \{this.state.loading && <Loader></Loader>\} we can add a loader where loading state is true\par
24.\{!this.state.loading && this.state.articles.map((element)=>\{\par
            return ()        \})\}\par
We can run this map function only when loading is false\par
25. While using react-router-dom, we need to pass unique key in each route to remount the component. else navigation wont work\par
<Router>\par
          <Navbar/>\par
          <Routes>\par
            <Route exact path='/' element=\{<News key="general" pageSize=\{12\} country="in" category="general"/>\}></Route>\par
            <Route exact path='/technology' element=\{<News key="technology" pageSize=\{12\} country="in" category="technology"/>\}></Route>\par
            <Route exact path='/business' element=\{<News key="business" pageSize=\{12\} country="in" category="business"/>\}></Route>\par
            <Route exact path='/entertainment' element=\{<News key="entertainment" pageSize=\{12\} country="in" category="entertainment"/>\}></Route>\par
            <Route exact path='/general' element=\{<News key="general" pageSize=\{12\} country="in" category="general"/>\}></Route>\par
            <Route exact path='/health' element=\{<News key="health" pageSize=\{12\} country="in" category="health"/>\}></Route>\par
            <Route exact path='/science' element=\{<News key="science" pageSize=\{12\} country="in" category="science"/>\}></Route>\par
            <Route exact path='/sports' element=\{<News key="sports" pageSize=\{12\} country="in" category="sports"/>\}></Route>\par
          </Routes>\par
        </Router>\par
26.npm install moment --save - used for displaying diff date formats\par
moment(publishedAt).utcOffset("+05:30").format('MMMM Do YYYY, h:mm:ss a')\par
27.React has four built-in methods that gets called, in this order, when mounting a component:\par
constructor()\par
getDerivedStateFromProps()\par
render()\par
componentDidMount()\par
27. this.setState(\{\par
        page: this.state.page+1\par
    \},()=>\{this.updateNews()\});\par
AND\par
await this.setState(\{\par
        page: this.state.page-1\par
    \});\par
    this.updateNews();\par
does same thing\par
28. If we want to use props in constructor , we need to pass props as argument to the constructor.\par
29. Component Lifecycle:\par
Mounting-Birth of your component\par
Updating-Growth of your component\par
Unmounting-Death of your component\par
30.Methods in React  Component Lifecycle\par
\tab The render() method is used to render HTML of the component in react.This method is required for a class based component to render the DOM. It runs during the mounting and updating of the component. Render method should be pure i.e you cannot modify state inside it.\par
\tab The componentDidMount() method runs after the component output has been rendered to the DOM.\par
\tab The componentDidUpdate method invokes as soon as the updating happens. The most common use case of this method is to update the DOM in response to props or state changes.\par
\tab The componentWillUnmount() method is called just before the component is unmounted and destroyed. Usually used to perform cleanups.\par
31. npm i react-infinite-scroll-component\par
32. <InfiniteScroll\par
          dataLength=\{this.state.items.length\}\par
          next=\{this.fetchMoreData\}\par
          hasMore=\{true\}\par
          loader=\{<h4>Loading...</h4>\}\par
        >\par
used for infinite scroll\par
33. npm i react-top-loading-bar\par
34. <LoadingBar\par
            height=\{4\}\par
            color='#f11946'\par
            progress=\{this.state.progress\}\par
          />\par
35. .env.local - to store environment variables\par
36. Hooks in React\par
\tab Features of class based components in function based components.\par
\tab It allows you to use state and other React features without writing a class.\par
\tab Hooks are the functions which "hook into"  React state and lifecycle  features  from function components.\par
37. Commonly used react hooks:\par
\tab useState\par
\tab useEffect\par
\tab useContext\par
\tab useRef\par
38. useState can be used to initialize a state variable and update that variable\par
39. useEffect can be used instead of componentDidMount/componentDidUpdate.Also can be used to update the component.\par
40. When there is a huge component tree, and we want to update something using props, instead of going through all intermediate components, we can make that prop available globally using useContext.\par
41. useRef returns a mutable reference object, in this there will be ".current" property we can point any element in a DOM\par
42. //eslint-disable-next-line disables the warning.\par
\par
}
 